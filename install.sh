#!/bin/bash
set -e

# --- Couleurs et fonctions de log ---
GREEN='\033[0;32m'; YELLOW='\033[0;33m'; RED='\033[0;31m'
BLUE='\033[0;34m'; MAGENTA='\033[0;35m'; CYAN='\033[0;36m'; NC='\033[0m'
declare -A ICONS
ICONS=( ["system"]="‚öôÔ∏è" ["zsh"]="‚ö°" ["brew"]="üç∫" ["apps"]="üì¶" ["font"]="üé®" ["dots"]="üîó" ["nvim"]=" V " ["summary"]="üìú" )

log_step() { local step="$1"; local msg="$2"; local icon="${ICONS[$step]}"; [ -z "$icon" ] && icon="‚ÑπÔ∏è"; echo -e "\n$(date '+%H:%M:%S') $icon ${BLUE}$msg${NC}"; }
ok() { echo -e "$(date '+%H:%M:%S') ‚úÖ ${GREEN}$1${NC}"; }
warn() { echo -e "$(date '+%H:%M:%S') ‚ö†Ô∏è ${YELLOW}$1${NC}"; }
error() { echo -e "$(date '+%H:%M:%S') ‚ùå ${RED}$1${NC}"; exit 1; }

# --- Variables Globales ---
# Si un argument est pass√©, on l'utilise comme URL du d√©p√¥t (cas bootstrap)
if [ -n "$1" ]; then
    DOTFILES_REPO="$1"
    echo -e "\n[DEBUG] DOTFILES_REPO re√ßu en argument : '$DOTFILES_REPO'"
else
    DOTFILES_REPO=""
fi
DOTFILES_DIR="$HOME/.dotfiles"
CONFIG_DIR="$HOME/.config"

# --- 0. FONCTION : INVITE INTERACTIVE POUR L'URL ---
function get_dotfiles_repo_url() {
    log_step "dots" "Configuration de l'acc√®s au d√©p√¥t priv√© (HTTPS/PAT)..."
    echo -e "${YELLOW}Veuillez saisir les informations d'acc√®s √† votre d√©p√¥t dotfiles priv√© :${NC}"
    read -p "  [?] Votre nom d'utilisateur GitHub : " GITHUB_USER
    if [ -z "$GITHUB_USER" ]; then error "Nom d'utilisateur ne peut √™tre vide."; fi
    read -sp "  [?] Votre Personal Access Token (PAT) : " GITHUB_TOKEN
    echo
    if [ -z "$GITHUB_TOKEN" ]; then error "Token ne peut √™tre vide."; fi
    read -p "  [?] URL HTTPS du d√©p√¥t (ex: https://github.com/user/repo.git) : " REPO_BASE_URL
    if [ -z "$REPO_BASE_URL" ]; then error "URL de d√©p√¥t ne peut √™tre vide."; fi
    DOTFILES_REPO=$(echo "$REPO_BASE_URL" | sed "s/https:\/\//https:\/\/$GITHUB_USER:$GITHUB_TOKEN@/")
    ok "URL d'acc√®s s√©curis√©e configur√©e."
}

# --- 1. FONCTION : MISE √Ä JOUR SYST√àME ---
function update_system() {
    log_step "system" "Mise √† jour du syst√®me (update & upgrade)..."
    sudo apt update -qq && sudo apt upgrade -y || error "√âchec de la mise √† jour du syst√®me."
    ok "Syst√®me √† jour."
}

# --- 2. FONCTION : D√âPENDANCES ESSENTIELLES ---
function install_core_dependencies() {
    log_step "apps" "Installation des d√©pendances essentielles (git, curl, build-essential)..."
    CORE_DEPS=(git curl build-essential)
    sudo apt update -qq
    sudo apt install -y "${CORE_DEPS[@]}" || error "Impossible d'installer les d√©pendances essentielles."
    ok "D√©pendances essentielles install√©es."
}

# --- 3. FONCTION : D√âPLOIEMENT DES DOTFILES ---
function deploy_dotfiles() {
    log_step "dots" "Clonage et d√©ploiement du d√©p√¥t dotfiles."
    if [ -z "$DOTFILES_REPO" ]; then error "L'URL du d√©p√¥t n'a pas √©t√© configur√©e."; fi

    if [ -d "$DOTFILES_DIR" ]; then
        log_step "dots" "Mise √† jour du d√©p√¥t dotfiles existant..."
        (cd "$DOTFILES_DIR" && git remote set-url origin "$DOTFILES_REPO" && git pull) || warn "√âchec de la mise √† jour du d√©p√¥t."
    else
        log_step "dots" "Clonage du d√©p√¥t dotfiles..."
        git clone --recurse-submodules "$DOTFILES_REPO" "$DOTFILES_DIR" || error "√âchec du clonage."
    fi

    if [ ! -d "$CONFIG_DIR" ]; then mkdir -p "$CONFIG_DIR"; ok "$CONFIG_DIR cr√©√©."; fi

    log_step "dots" "Cr√©ation des liens symboliques..."
    ln -snfv "$DOTFILES_DIR/.zshrc" "$HOME/.zshrc"
    ln -snfv "$DOTFILES_DIR/.config/nvim" "$CONFIG_DIR/nvim"
    ok "Dotfiles d√©ploy√©s."
}

# --- 4. FONCTION : INSTALLATION ET CONFIGURATION HOMEBREW ---
function setup_homebrew() {
    log_step "brew" "V√©rification et configuration de l'environnement Homebrew (Multi-utilisateur)..."
    
    local brew_path="/home/linuxbrew/.linuxbrew/bin/brew"
    local brew_shellenv_line='eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"'
    local zshrc_file="$HOME/.zshrc"

    if ! command -v brew >/dev/null 2>&1; then
        if [ -x "$brew_path" ]; then
            eval "$("$brew_path" shellenv)"
        else
            log_step "brew" "Homebrew non trouv√©, installation en cours..."
            if CI=true /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"; then ok "Installation de Homebrew r√©ussie."; else error "L'installation de Homebrew a √©chou√©."; fi
            if [ -x "$brew_path" ]; then eval "$("$brew_path" shellenv)"; else error "Binaire Homebrew introuvable apr√®s installation."; fi
        fi
        ok "Environnement Homebrew charg√© pour la session."
    else
        ok "Homebrew est d√©j√† configur√© dans le PATH."
    fi

    if [ -f "$zshrc_file" ] && ! grep -q "$brew_shellenv_line" "$zshrc_file"; then
        log_step "brew" "Ajout de la variable d'environnement Homebrew √† $zshrc_file..."
        echo -e "\n# Homebrew" >> "$zshrc_file"
        echo "$brew_shellenv_line" >> "$zshrc_file"
        ok "Configuration Homebrew ajout√©e au .zshrc."
    else
        ok "Configuration Homebrew d√©j√† pr√©sente dans le .zshrc."
    fi
}

# --- 5. FONCTION : INSTALLATION DES APPLICATIONS ET OUTILS ---
function install_apps() {
    log_step "apps" "Installation des applications, polices et outils additionnels..."

    BREW_PACKAGES_FILE="$DOTFILES_DIR/packages.brew"
    if [ -f "$BREW_PACKAGES_FILE" ]; then
        if command -v brew >/dev/null 2>&1; then
            log_step "apps" "Installation des outils via Homebrew depuis la liste..."
            while read -r tool; do
                if [[ "$tool" =~ ^\s*#.*$ ]] || [[ -z "$tool" ]]; then continue; fi
                if brew list "$tool" &>/dev/null; then ok "$tool d√©j√† pr√©sent"; else
                    if brew install "$tool"; then ok "$tool install√©"; else warn "√âchec de l'installation de $tool."; fi
                fi
            done < <(grep -vE '^\s*#|^\s*$' "$BREW_PACKAGES_FILE")
        else
             warn "Brew n'est pas dans le PATH. Installation Homebrew via liste ignor√©e."
        fi
    else
        warn "Fichier packages.brew non trouv√©. Installation Homebrew ignor√©e."
    fi

    APT_PACKAGES_FILE="$DOTFILES_DIR/packages.apt"
    if [ -f "$APT_PACKAGES_FILE" ]; then
        log_step "apps" "Installation des d√©pendances syst√®me (APT) depuis la liste..."
        sudo apt update -qq
        if grep -vE '^\s*#|^\s*$' "$APT_PACKAGES_FILE" | xargs sudo apt install -y ; then ok "D√©pendances APT install√©es."; else error "Impossible d'installer les d√©pendances APT."; fi
    else
        warn "Fichier packages.apt non trouv√©. D√©pendances APT ignor√©es."
    fi

    FONT_DIR="$HOME/.local/share/fonts"
    log_step "font" "Installation de la police FiraCode Nerd Font..."
    if [ -d "$FONT_DIR/FiraCode" ]; then ok "Police FiraCode d√©j√† install√©e."; else
        mkdir -p "$FONT_DIR"; TEMP_ZIP=$(mktemp)
        curl -L "https://github.com/ryanoasis/nerd-fonts/releases/latest/download/FiraCode.zip" -o "$TEMP_ZIP"
        unzip -q "$TEMP_ZIP" -d "$FONT_DIR/FiraCode"; rm "$TEMP_ZIP"; fc-cache -fv >/dev/null; ok "Police FiraCode install√©e."
    fi

    # Installation automatique des serveurs LSP n√©cessaires
    log_step "apps" "Installation de bash-language-server (npm) si absent..."
    if ! command -v bash-language-server >/dev/null 2>&1; then
        if command -v npm >/dev/null 2>&1; then
            npm install -g bash-language-server && ok "bash-language-server install√©."
        else
            warn "npm non trouv√©, bash-language-server non install√©. Installez Node.js et npm pour le support Bash LSP."
        fi
    else
        ok "bash-language-server d√©j√† pr√©sent."
    fi

    log_step "apps" "Installation de lua-language-server (apt ou brew) si absent..."
    if ! command -v lua-language-server >/dev/null 2>&1; then
        if command -v apt >/dev/null 2>&1; then
            sudo apt update -qq && sudo apt install -y lua-language-server && ok "lua-language-server install√© (apt)."
        elif command -v brew >/dev/null 2>&1; then
            brew install lua-language-server && ok "lua-language-server install√© (brew)."
        else
            warn "Ni apt ni brew trouv√©s, lua-language-server non install√©. Installez-le manuellement pour le support Lua LSP."
        fi
    else
        ok "lua-language-server d√©j√† pr√©sent."
    fi
}

# --- 6. FONCTION : INSTALLATION DE ZSH ET SES PLUGINS ---
function install_zsh_and_plugins() {
    log_step "zsh" "Installation de Zsh, Oh My Zsh et plugins..."

    if ! command -v zsh >/dev/null 2>&1; then sudo apt install -y zsh; ok "Zsh install√©."; else ok "Zsh d√©j√† pr√©sent."; fi
    
    if [ ! -d "$HOME/.oh-my-zsh" ]; then
        git clone --depth=1 https://github.com/ohmyzsh/ohmyzsh.git "$HOME/.oh-my-zsh" || error "Impossible de cloner Oh My Zsh."
        ok "Oh My Zsh install√©."
    else
        ok "Oh My Zsh d√©j√† pr√©sent."
    fi

    ZSH_PATH=$(command -v zsh)
    if [ "$SHELL" != "$ZSH_PATH" ]; then
        chsh -s "$ZSH_PATH" || warn "Impossible de changer le shell. Faites-le manuellement."
        ok "Zsh d√©fini comme shell par d√©faut."
    fi

    local plugins_dir="$HOME/.oh-my-zsh/custom/plugins"
    mkdir -p "$plugins_dir"

    declare -A plugins_repos=(
        ["zsh-autosuggestions"]="https://github.com/zsh-users/zsh-autosuggestions.git"
        ["zsh-syntax-highlighting"]="https://github.com/zsh-users/zsh-syntax-highlighting.git"
        ["fzf-tab"]="https://github.com/Aloxaf/fzf-tab.git"
        ["zsh-completions"]="https://github.com/zsh-users/zsh-completions.git"
    )
    for name in "${!plugins_repos[@]}"; do
        if [ ! -d "$plugins_dir/$name" ]; then
            git clone --depth=1 "${plugins_repos[$name]}" "$plugins_dir/$name" || warn "√âchec du clonage de $name."
        fi
    done
    ok "Plugins Zsh v√©rifi√©s/install√©s."
}

# --- 7. FONCTION : CONFIGURATION DE NEOPIM (PLUGINS UNIQUEMENT) ---
function setup_neovim() {
    log_step "nvim" "Configuration des plugins Neovim (Packer)..."
    NVIM_BIN=$(command -v nvim || echo "")

    if [ -z "$NVIM_BIN" ]; then
        warn "Binaire Neovim non trouv√©. La configuration de Neovim est ignor√©e."
        return
    fi

    # 1. Assure que Packer est install√©
    local packer_install_path="$HOME/.local/share/nvim/site/pack/packer/start/packer.nvim"
    if [ ! -d "$packer_install_path" ]; then
        log_step "nvim" "Installation initiale de Packer.nvim..."
        git clone --depth 1 https://github.com/wbthomason/packer.nvim "$packer_install_path" || warn "√âchec de l'installation de Packer."
    fi

    # 2. Ex√©cute la synchronisation via une simple commande Vimscript.
    log_step "nvim" "Synchronisation des plugins (PackerSync)..."
    
    # Ex√©cution de PackerSync en mode headless. Cette commande quitte automatiquement une fois termin√©e.
    if "$NVIM_BIN" --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'; then
        echo
        ok "Plugins Neovim synchronis√©s avec succ√®s."
    else
        # Cette erreur ne se d√©clenchera que si le processus nvim lui-m√™me √©choue (ex: introuvable).
        # Les erreurs Lua internes ne sont pas captur√©es ici, ce qui est le comportement que vous aviez et qui fonctionnait.
        error "Une erreur est survenue lors du lancement de Neovim pour la synchronisation."
    fi
}


# --- EX√âCUTION PRINCIPALE ---
echo
log_step "system" "=== D√©but du provisioning de la machine Debian ==="

update_system
install_core_dependencies
deploy_dotfiles
setup_homebrew
install_apps
install_zsh_and_plugins
setup_neovim

log_step "summary" "‚úÖ Provisioning termin√© avec succ√®s !"
echo
echo -e "${CYAN}Actions requises :${NC}"
echo -e "  1. ${YELLOW}Fermez et rouvrez votre terminal${NC} (ou ex√©cutez ${GREEN}exec zsh${NC}) pour charger Zsh et la nouvelle configuration."
echo -e "  2. Si vous utilisez un terminal graphique, configurez la police ${YELLOW}FiraCode Nerd Font${NC}."
